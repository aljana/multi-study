{"version":3,"file":"frontend/app.js","names":[],"mappings":"","sources":["frontend/app.js"],"sourcesContent":["// Import app modules\nimport './quizzes/quizzes';\nimport './auth/auth';\nimport './common/directives';\nimport './common/services';\n\n// Register main module\nangular.module('app', [\n  'ngResource',\n  'ngAnimate',\n  'ngCookies',\n  'angular-loading-bar',\n  'angular-data.DSCacheFactory',\n  'toastr',\n  'ui.router',\n  'app.directives',\n  'app.services',\n  'app.quizzes',\n  'app.auth'\n])\n  .config([\n    '$provide',\n    '$resourceProvider',\n    '$httpProvider',\n    '$locationProvider',\n    'cfpLoadingBarProvider',\n    'settings',\n    ($provide, $resourceProvider, $httpProvider, $locationProvider, cfpLoadingBarProvider, settings) => {\n      $locationProvider.html5Mode(true);\n      $locationProvider.hashPrefix('!');\n\n      $resourceProvider.defaults.stripTrailingSlashes = false;\n\n      $provide.decorator('$resource', ($delegate) => {\n        var url = settings.apiUrl, args;\n\n        if (url.substr(-1) === '/') {\n          url = url.substr(0, url.length - 1);\n        }\n\n        return (...args) => {\n          if (args[0].substr(-1) === '/') {\n            args[0] = url + '/' + args[0];\n          } else {\n            args[0] = url + '/' + args[0] + '/';\n          }\n          if (args[2]) {\n            for (var method in args[2]) {\n              if (args[2].hasOwnProperty(method) && args[2][method].url) {\n                if (args[2][method].url.substr(-1) === '/') {\n                  args[2][method].url = url + '/' + args[2][method].url;\n                } else {\n                  args[2][method].url = url + '/' + args[2][method].url + '/';\n                }\n              }\n            }\n          }\n          return $delegate.apply(this, args);\n        };\n      });\n\n      cfpLoadingBarProvider.includeSpinner = false;\n\n      $httpProvider.defaults.useXDomain = true;\n      $httpProvider.defaults.xsrfHeaderName = 'X-CSRFToken';\n      $httpProvider.defaults.xsrfCookieName = 'csrftoken';\n      delete $httpProvider.defaults.headers.common['X-Requested-With'];\n    }])\n  .constant('settings', {\n    apiUrl: 'http://dev.multi-study.local/api',\n    socketUrl: 'http://ws.multi-study.local',\n    publicUrl: 'http://public.multi-study.local'\n  })\n  .run(['$rootScope', '$state', 'LoggerService', 'UserService', ($rootScope, $state, loggerService, userService) => {\n    $rootScope.$watch(() => {\n      return userService.authenticated;\n    }, (authenticated) => {\n      if (authenticated && $state.is('login')) {\n         $state.go('quizzes', {}, {notify: true, reload: true, inherit: true});\n      }\n    });\n\n    $rootScope.$on('$stateChangeStart', (event, toState) => {\n      if (!toState.data || !angular.isFunction(toState.data.rule)) {\n        return;\n      }\n      var result = toState.data.rule(userService);\n      if (result) {\n        event.preventDefault();\n        $state.go(result.to || result, result.params || {}, {notify: false});\n      }\n    });\n    $rootScope.$on('$stateChangeError', (event, toState, toParams, fromState, fromParams, error) => {\n      loggerService.log('error', error);\n    });\n  }]);\n\n\n// Bootstrap app\nangular.element(document).ready(() => {\n  if (window.location.hash === '#_=_') {\n    window.location.hash = '#!';\n  }\n  angular.bootstrap(document, ['app']);\n});\n"],"sourceRoot":"/source/"}