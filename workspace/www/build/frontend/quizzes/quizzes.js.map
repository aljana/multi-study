{"version":3,"file":"frontend/quizzes/quizzes.js","names":[],"mappings":"","sources":["frontend/quizzes/quizzes.js"],"sourcesContent":["import IndexController from './controllers/index';\nimport QuizController from './controllers/quiz';\nimport StatsController from './controllers/stats';\n\nangular.module('app.quizzes', [])\n  .config(['$stateProvider', ($stateProvider) => {\n    $stateProvider\n      .state('quizzes', {\n        url: '/',\n        templateUrl: './templates/quizzes.html',\n        controller: IndexController,\n        controllerAs: 'IndexController',\n        resolve: {\n          quizPagination: ['QuizService', (quizService) => {\n            return quizService.query().$promise;\n          }]\n        }\n      })\n      .state('quiz', {\n        url: '/quiz/:quizId/',\n        templateUrl: './templates/quiz.html',\n        controller: QuizController,\n        controllerAs: 'QuizController',\n        resolve: {\n          quiz: ['$state', '$stateParams', 'QuizService', ($state, $stateParams, quizService) => {\n            return quizService.get({quizId: $stateParams.quizId}, function (quiz) {\n              if (quiz.state !== 'open' && quiz.state !== 'active') {\n                $state.go('quizzes');\n              } else if (quiz.state === 'open') {\n                quizService.participate({quizId: $stateParams.quizId});\n              }\n            }).$promise;\n          }]\n        },\n        data: {\n          rule: function (user) {\n            if (!user.credentials) {\n              return 'home';\n            }\n          }\n        }\n      })\n      .state('quiz-stats', {\n        url: '/quiz/:quizId/stats/',\n        templateUrl: './templates/stats.html',\n        controller: StatsController,\n        controllerAs: 'StatsController',\n        resolve: {\n          quiz: ['$state', '$stateParams', 'QuizService', ($state, $stateParams, quizService) => {\n            return quizService.get({quizId: $stateParams.quizId}, function (quiz) {\n              if (quiz.state !== 'closed') {\n                $state.go('quizzes');\n              }\n            }).$promise;\n          }],\n          stats: ['$state', '$stateParams', 'QuizService', ($state, $stateParams, quizService) => {\n            return quizService.stats({quizId: $stateParams.quizId}).$promise;\n          }]\n        },\n        data: {\n          rule: function (user) {\n            if (!user.credentials) {\n              return 'home';\n            }\n          }\n        }\n      });\n  }]);\n"],"sourceRoot":"/source/"}