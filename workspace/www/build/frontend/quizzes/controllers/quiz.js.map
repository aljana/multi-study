{"version":3,"file":"frontend/quizzes/controllers/quiz.js","names":[],"mappings":"","sources":["frontend/quizzes/controllers/quiz.js"],"sourcesContent":["class QuizController {\n  constructor($scope, $timeout, $state, quiz, userService, quizService, socketService) {\n    this.$scope = $scope;\n    this.quiz = quiz;\n    this.userService = userService;\n    this.quizService = quizService;\n    this.socketService = socketService;\n    this.textInput = '';\n    this.radioInput = null;\n    this.messages = [];\n\n    socketService.emit('chat-join', {\n      email: userService.credentials.user.email,\n      quizPk: this.quiz.pk\n    });\n\n    var start;\n    var segments = this.quiz.start.split(':');\n\n    if (this.quiz.state === 'active') {\n      start = new Date(this.quiz.timeUpdated);\n      this.countdown = Math.round((start - new Date()) / 1000) + this.quiz.question.timeLimit;\n    } else {\n      start = new Date();\n      start.setHours(segments[0]);\n      start.setMinutes(segments[1]);\n      start.setSeconds(segments[2]);\n      this.countdown = Math.round((start - new Date()) / 1000);\n    }\n\n    setInterval(() => {\n      if (this.countdown > 0) {\n        this.countdown--;\n      }\n      $scope.$apply();\n    }, 1000);\n\n    socketService.on('chat', (message) => {\n      if (message.action === 'chat-join') {\n        if (this.messages.length === 0) {\n          Array.prototype.push.apply(this.messages, message.messages);\n        }\n      }\n      else if (message.action === 'chat-message') {\n        this.messages.push(message);\n      }\n    });\n\n    socketService.on('quiz:' + this.quiz.pk, (message) => {\n      message = JSON.parse(message);\n      //console.log(message);\n      if (message.action === 'change-question') {\n        this.quiz.answered = false;\n        this.quiz.question = message.question;\n        this.countdown = Math.round(((new Date(message.timeUpdated) - new Date()) / 1000) + message.question.timeLimit);\n        $timeout(function () {\n          $scope.$apply();\n        }, 0, false);\n      } else if (message.action === 'close-quiz') {\n        $state.go('quiz-stats', {quizId: this.quiz.pk}, {\n          reload: true,\n          inherit: true,\n          notify: true\n        });\n      }\n    });\n  }\n\n  submitTextInput() {\n    if (this.quiz.question) {\n      this.quizService.submitAnswer({quizId: this.quiz.pk}, {\n        text: this.textInput\n      }, () => {\n        this.quiz.answered = true;\n      });\n    } else if (this.textInput.length > 0) {\n      this.socketService.emit('chat-message', {\n        pk: this.quiz.pk,\n        email: this.userService.credentials.user.email,\n        message: this.textInput\n      });\n    }\n\n\n    this.textInput = '';\n  }\n\n  submitRadioInput() {\n    if (this.radioInput) {\n      this.quizService.submitAnswer({quizId: this.quiz.pk}, {\n        text: this.radioInput\n      }, () => {\n        this.quiz.answered = true;\n      });\n\n      this.radioInput = null;\n    }\n  }\n}\n\nQuizController.$inject = ['$scope', '$timeout', '$state', 'quiz', 'UserService', 'QuizService', 'SocketService'];\n\nexport default QuizController;\n"],"sourceRoot":"/source/"}