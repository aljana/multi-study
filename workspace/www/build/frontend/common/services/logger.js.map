{"version":3,"file":"frontend/common/services/logger.js","names":[],"mappings":"","sources":["frontend/common/services/logger.js"],"sourcesContent":["class LoggerService {\n  constructor(log, toastr) {\n    this._log = log;\n    this._toastr = toastr;\n  }\n\n  log(type, msg, title, mode) {\n    msg = this.parse(msg);\n    mode = mode || 0;\n\n    // Log to console\n    if (mode === LoggerService.MODES.ALL || mode === LoggerService.MODES.CONSOLE) {\n      if (type === 'error') {\n        if (msg.stack) {\n          this._log.error(msg.name || title + ':', msg.message, msg.stack);\n        } else {\n          this._log.error(msg.name || title + ':', msg.message);\n        }\n      } else if (type === 'info') {\n        this._log.info(msg.name || title + ':', msg.message);\n      } else if (type === 'warn') {\n        this._log.warn(msg.name || title + ':', msg.message);\n      } else {\n        this._log.log(msg.name || title + ':', msg.message);\n      }\n    }\n\n    // Toastr\n    if (mode === LoggerService.MODES.ALL || mode === LoggerService.MODES.TOASTR) {\n      this._toastr[type](msg.toastr, title || null);\n    }\n  }\n\n  parse(err) {\n    var\n      error = {},\n      index;\n\n    if (angular.isObject(err)) {\n      if (err.data) {\n        err = err.data;\n      }\n\n      if (err.error) {\n        err = err.error;\n      }\n\n      if (err.constructor.name && err.constructor.name !== 'Object') {\n        error.name = err.constructor.name;\n      } else {\n        error.name = 'Error';\n      }\n\n      error.status = err.status || err.statusCode || -1;\n\n      if (err.message) {\n        error.message = err.message.charAt(0).toUpperCase() + err.message.slice(1);\n        error.toastr = error.message;\n        if (error.toastr.charAt(error.toastr.length) !== '.') {\n          error.toastr += '!';\n        }\n      }\n      if (err.stack) {\n        index = err.message ? err.stack.indexOf(' at ') : -1;\n        var spaces = err.stack.slice(0, index);\n        spaces = spaces.length - spaces.trim().length;\n        if (index !== -1) {\n          error.stack = '\\n' + (new Array(spaces)).join(' ') + err.stack.slice(index);\n        } else {\n          error.stack = err.stack;\n        }\n      }\n    } else {\n      error.name = '';\n      error.code = -1;\n    }\n\n    if (!error.message) {\n      error.message = err;\n    }\n\n    if (!error.toastr) {\n      error.toastr = err;\n    }\n\n    return error;\n  }\n}\n\nLoggerService.MODES = {\n  ALL: 0,\n  CONSOLE: 1,\n  TOASTR: 2\n};\n\nLoggerService.$inject = ['$log', 'toastr'];\n\nexport default LoggerService;\n"],"sourceRoot":"/source/"}